/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.CDC;

import business.Analytics.AnalysisHelper;
import business.Business;
import business.Organization.CDCOrganization;
import business.Organization.ClinicOrganization;
import business.Organization.PHDOrganization;
import business.Organization.ProviderOrganization;
import business.UserAccount.UserAccount;
import business.Vaccine.Vaccine;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;


/**
 *
 * @author mac
 */
public class CDCEventMgtJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private UserAccount account;
    private CDCOrganization cdcOrganization;
    private Business business;

    /**
     * Creates new form VaccineEventMgtJPanel
     */
    public CDCEventMgtJPanel(JPanel userProcessContainer, UserAccount account, CDCOrganization cdcOrganization, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.cdcOrganization = cdcOrganization;
        this.business = business;
        populateTbl();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblEvents = new javax.swing.JTable();
        btnBarRateVaccine = new javax.swing.JButton();
        btnBarRateState1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1024, 768));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CDC Event Summary");

        btnBack.setFont(new java.awt.Font("Helvetica Neue", 1, 15)); // NOI18N
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine", "Total Event", "Adverse Reactions", "Adverse Rate", "Manufacturer"
            }
        ));
        jScrollPane3.setViewportView(tblEvents);

        btnBarRateVaccine.setText("Bar Chart: Adverse Rate in Different Vaccine");
        btnBarRateVaccine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBarRateVaccineActionPerformed(evt);
            }
        });

        btnBarRateState1.setText("Pie Chart: Distribution of adverse event by manufacture");
        btnBarRateState1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBarRateState1ActionPerformed(evt);
            }
        });

        jButton1.setText("Chartï¼šVaccine Event Statistics");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 122, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBarRateVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBarRateState1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)))
                        .addGap(120, 120, 120))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBarRateState1, btnBarRateVaccine, jButton1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(jLabel1))
                .addGap(70, 70, 70)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBarRateVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBarRateState1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(217, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBarRateState1, btnBarRateVaccine, jButton1});

    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);     
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnBarRateVaccineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBarRateVaccineActionPerformed
        // TODO add your handling code here:

        // Create dataset
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
         for (int row = 0; row < tblEvents.getRowCount(); row++) {
            String vaccineType = tblEvents.getValueAt(row, 0).toString();
            double adverseRate = Double.parseDouble(((String) tblEvents.getValueAt(row, 3)).replace("%", ""));

            dataset.addValue(adverseRate, "Adverse Rate", vaccineType);
        }     
               
        JFreeChart chart = ChartFactory.createBarChart(
                "Adverse Reaction Rates by Vaccine",
                "Vaccine",
                "Adverse Rate (%)", 
                dataset
        );
        
        chart.setBackgroundPaint(Color.WHITE);
        chart.getTitle().setPaint(Color.BLACK);
        CategoryPlot p = chart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) p.getRenderer();
        renderer.setSeriesPaint(0, Color.YELLOW);
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Bar Chart for Adverse Rate ", chart);
        frame.setVisible(true);
        frame.setSize(550,450);
        
    }//GEN-LAST:event_btnBarRateVaccineActionPerformed

    private void btnBarRateState1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBarRateState1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm_ = (DefaultTableModel) tblEvents.getModel();
        Map<String, Integer> manufacturerAdverseCounts = new HashMap<>();
        
        // Loop through the table data to summarize adverse counts by manufacturer
        for (int row = 0; row < dtm_.getRowCount(); row++) {
            String manufacturer = (String) dtm_.getValueAt(row, 4);
            int adverseCount = (int) dtm_.getValueAt(row, 2);
            
            manufacturerAdverseCounts.put(manufacturer, 
                    manufacturerAdverseCounts.getOrDefault(manufacturer, 0) + adverseCount);
        }
        
        DefaultPieDataset dataset = new DefaultPieDataset();
        for (String manufacturer : manufacturerAdverseCounts.keySet()) {
            int adverseCount = manufacturerAdverseCounts.get(manufacturer);
            dataset.setValue(manufacturer, adverseCount);
        }
        
        JFreeChart chart = ChartFactory.createPieChart(
                "Distribution of Adverse Event by Manufacturer", 
                dataset, 
                true, 
                true, 
                false
        );
        
        chart.setBackgroundPaint(Color.WHITE);
        chart.getTitle().setPaint(Color.BLACK);
        PiePlot p = (PiePlot) chart.getPlot();
        p.setLabelGenerator(new StandardPieSectionLabelGenerator("{0}: {1} ({2})", new DecimalFormat("0"), new DecimalFormat("0%")));
        ChartFrame frame = new ChartFrame("Pie Chart for Adverse Event", chart);
        frame.setVisible(true);
        frame.setSize(550,450);
        
    }//GEN-LAST:event_btnBarRateState1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm_ = (DefaultTableModel) tblEvents.getModel();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        int rowCount = dtm_.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String vaccineName = dtm_.getValueAt(i, 0).toString();
            int eventCount = (int) dtm_.getValueAt(i, 1);

            dataset.addValue(eventCount, "Event Count", vaccineName);
        }

        JFreeChart chart = ChartFactory.createBarChart(
                "Vaccine Event Statistics", // Chart title
                "Vaccine", // X-axis label
                "Event Count", // Y-axis label
                dataset, // Dataset
                PlotOrientation.VERTICAL, // Plot orientation
                true, // Include legend
                true,
                false
        );

        ChartPanel chartPanel = new ChartPanel(chart);
        JFrame chartFrame = new JFrame("Vaccine Event Statistics");
        chartFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Dispose the chart frame on close
        chartFrame.setLayout(new BorderLayout());
        chartFrame.add(chartPanel, BorderLayout.CENTER);
        chartFrame.pack();
        chartFrame.setSize(800, 600);
        chartFrame.setLocationRelativeTo(null);
        chartFrame.setVisible(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBarRateState1;
    private javax.swing.JButton btnBarRateVaccine;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblEvents;
    // End of variables declaration//GEN-END:variables
    
    private void populateTbl() {
        DefaultTableModel dtm_ = (DefaultTableModel) tblEvents.getModel();
        dtm_.setRowCount(0);
        List<ClinicOrganization> clinics = new ArrayList<>();
        for (PHDOrganization phd : cdcOrganization.getPhdOrganizations()) {
            for (ProviderOrganization provider : phd.getProviders()) {
                for  (ClinicOrganization clinic : provider.getClinics()) {
                    clinics.add(clinic);
                }
            }
        }
        AnalysisHelper analysisHelper = new AnalysisHelper();
        analysisHelper.analyzeVaccineEvents(clinics);
        
        for (Vaccine vaccine : analysisHelper.getVaccineEventCountMap().keySet()) {
            int eventCount = analysisHelper.getEventCountForVaccine(vaccine);
            int adverseCount = analysisHelper.getAdverseCountForVaccine(vaccine);
            double adverseReactionRate = analysisHelper.calculateAdverseReactionRate(adverseCount, eventCount);
            
            Object[] row = new Object[5];
            row[0] = vaccine;
            row[1] = eventCount;
            row[2] = adverseCount;
            row[3] = String.format("%.2f%%", adverseReactionRate * 100); // Convert to percentage
            row[4] = vaccine.getManufacturer();

            dtm_.addRow(row);        
        }     
    }
}
